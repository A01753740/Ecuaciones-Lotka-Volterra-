# -*- coding: utf-8 -*-
"""Fase 2_Actividad 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EdIujSaBp4LOiJhiL3iKOu3sNw_jljmE

# Fase 2 | Actividad 2

Discretización para resolver el sistema con un método $O\left ( h^{3} \right )$, con la ayuda de estas consideraciones:

$x\left ( t + \Delta t \right )= x\left ( t \right )+\frac{dx}{dt}\Delta t+\frac{1}{2}\frac{d^{2}x}{dt^{2}}\Delta t^{2}$

$y\left ( t + \Delta t \right )= y\left ( t \right )+\frac{dy}{dt}\Delta t+\frac{1}{2}\frac{d^{2}y}{dt^{2}}\Delta t^{2}$


$\left\{\begin{matrix}
x_{n+1}=x_{n}+\dot{x_{n}}\Delta t+\frac{1}{2}\ddot{x_{n}}\Delta t^{2} \\ y_{n+1}=y_{n}+\dot{y_{n}}\Delta t+\frac{1}{2}\ddot{y_{n}}\Delta t^{2}
\end{matrix}\right.$


$\left\{\begin{matrix}
 \dot{x}_{n}=ax_{n}-bx_{n}y_{n}\\ \dot{y}_{n}=-cy_{n}-dx_{n}y_{n}
\end{matrix}\right.$


$\left\{\begin{matrix}
\ddot{x}_{n}=a\dot{x}_{n}-b\left ( \dot{x}_{n}y_{n}+x_{n}\dot{y}_{n} \right ) \\ \ddot{y}_{n}=-c\dot{y}_{n}+d\left ( \dot{x}_{n}y_{n}+x_{n}\dot{y}_{n} \right )
\end{matrix}\right.$


Implementar el resultado en un código y resolver las ecuaciones.
"""

import numpy as np
import matplotlib.pyplot as plt

a = 1
b = 0.02
c = 1 
d = 0.01

x0 = 20.0  #número incial de presas
y0 = 20.0  #número incial de depredadores
t0 = 0.0   #tiempo de inicio
tf = 30.0  #tiempo final
h = 0.1   #paso

nt = int((tf-t0)/h) #número de pasos
x = np.empty(nt+1)
y = np.empty(nt+1)

x[0] = x0
y[0] = y0

for step in range(nt):
  dx = a*x[step] - b*x[step]*y[step]
  dy = -c*y[step] + d*x[step]*y[step]

  d2x = a*dx - b*(dx*y[step] + x[step]*dy)
  d2y = -c*dy + d*(dx*y[step] + x[step]*dy)

  x[step+1] = x[step] + dx*h + 1/2*(d2x*(h**2))
  y[step+1] = y[step] + dy*h + 1/2*(d2y*(h**2))

plt.plot(x)
plt.xlabel("tiempo")
plt.ylabel("población")
plt.title("Presas")
plt.show()

plt.plot(y, color = "red")
plt.xlabel("tiempo")
plt.ylabel("población")
plt.title("Depredadores")
plt.show()

fig, ax = plt.subplots(figsize = (8, 6))
ax.plot(x, label = "Presas")
ax.plot(y, color = "red", label = "Depredadores")
ax.set_xlabel("tiempo")
ax.set_ylabel("población")
ax.set_title("Ecuaciones Lotka-Volterra")
ax.legend(loc = "best")
#ax.grid()
plt.show()

"""Usar una función ya implementada que use un método más preciso (por ejemplo "odeint" en python) para comparar los resultados."""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
def df_dt(x, t, a, b, c, d):
    """Función del sistema en forma canónica"""
    dx = a * x[0] - b * x[0] * x[1]
    dy = - c * x[1] + d * x[0] * x[1]
    return np.array([dx, dy])
# Parámetros
a = 1
b = 0.02
c = 1 
d = 0.01
# Condiciones iniciales
x0 = 20   # Presas
y0 = 20   # Depredadores
conds_iniciales = np.array([x0, y0])
# Condiciones para integración
tf = 30
N = 800
t = np.linspace(0, tf, N)
solucion = odeint(df_dt, conds_iniciales, t, args=(a, b, c, d))

plt.plot(t, solucion[:, 0], color = 'green', label='Presa')
plt.plot(t, solucion[:, 1],  color = 'purple',label='Depredador')
plt.legend(loc = "best")
plt.xlabel("tiempo")
plt.ylabel("población")
plt.title("Método Odeint")

"""Hacer un gráfico de las órbitas y de $x\left ( t \right )$ y $y\left ( t \right )$."""

plt.title("Órbitas de x(t), y(t)")
plt.plot(x,y)